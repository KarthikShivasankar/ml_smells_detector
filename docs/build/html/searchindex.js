Search.setIndex({"alltitles": {"API Reference": [[0, null]], "Command-line Interface": [[8, "command-line-interface"]], "Contents:": [[6, null]], "Dependencies": [[7, "dependencies"]], "Detectors": [[0, "detectors"], [3, null]], "Features": [[5, null], [6, "features"]], "Framework-Specific Smell Detector": [[1, null]], "Framework-Specific Smells": [[5, "framework-specific-smells"]], "General": [[5, "general"]], "General ML Smell Detector": [[4, null]], "General ML Smells": [[5, "general-ml-smells"]], "Hugging Face Smell Detector": [[2, null]], "Hugging Face-Specific Smells": [[5, "hugging-face-specific-smells"]], "Indices and tables": [[6, "indices-and-tables"]], "Installation": [[7, null]], "NumPy": [[5, "numpy"]], "Pandas": [[5, "pandas"]], "PyTorch": [[5, "pytorch"]], "Python API": [[8, "python-api"]], "Quick Start": [[6, "quick-start"]], "Scikit-learn": [[5, "scikit-learn"]], "Source Code": [[1, "source-code"], [2, "source-code"], [4, "source-code"]], "TensorFlow": [[5, "tensorflow"]], "Usage": [[8, null]], "Use Cases": [[8, "use-cases"]], "Welcome to ML Code Smell Detector\u2019s documentation!": [[6, null]]}, "docnames": ["api", "detectors/framework_detector", "detectors/huggingface_detector", "detectors/index", "detectors/ml_detector", "features", "index", "installation", "usage"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["api.rst", "detectors/framework_detector.rst", "detectors/huggingface_detector.rst", "detectors/index.rst", "detectors/ml_detector.rst", "features.rst", "index.rst", "installation.rst", "usage.rst"], "indexentries": {"add_smell() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.add_smell", false]], "add_smell() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.add_smell", false]], "add_smell() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.add_smell", false]], "add_smell() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.add_smell", false]], "add_smell() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.add_smell", false]], "add_smell() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.add_smell", false]], "check_cross_validation() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_cross_validation", false]], "check_cross_validation() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_cross_validation", false]], "check_data_leakage() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_data_leakage", false]], "check_data_leakage() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_data_leakage", false]], "check_data_loading() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_data_loading", false]], "check_data_loading() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_data_loading", false]], "check_deterministic_tokenization() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_deterministic_tokenization", false]], "check_deterministic_tokenization() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_deterministic_tokenization", false]], "check_distributed_training() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_distributed_training", false]], "check_distributed_training() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_distributed_training", false]], "check_documentation() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_documentation", false]], "check_documentation() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_documentation", false]], "check_early_stopping() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_early_stopping", false]], "check_early_stopping() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_early_stopping", false]], "check_efficient_data_loading() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_efficient_data_loading", false]], "check_efficient_data_loading() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_efficient_data_loading", false]], "check_error_handling() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_error_handling", false]], "check_error_handling() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_error_handling", false]], "check_feature_scaling() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_feature_scaling", false]], "check_feature_scaling() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_feature_scaling", false]], "check_feature_selection() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_feature_selection", false]], "check_feature_selection() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_feature_selection", false]], "check_gradient_accumulation() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_gradient_accumulation", false]], "check_gradient_accumulation() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_gradient_accumulation", false]], "check_hardcoded_filepaths() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_hardcoded_filepaths", false]], "check_hardcoded_filepaths() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_hardcoded_filepaths", false]], "check_imbalanced_dataset() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_imbalanced_dataset", false]], "check_imbalanced_dataset() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_imbalanced_dataset", false]], "check_imports() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.check_imports", false]], "check_imports() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_imports", false]], "check_imports() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.check_imports", false]], "check_imports() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_imports", false]], "check_learning_rate_scheduling() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_learning_rate_scheduling", false]], "check_learning_rate_scheduling() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_learning_rate_scheduling", false]], "check_magic_numbers() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_magic_numbers", false]], "check_magic_numbers() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_magic_numbers", false]], "check_metric_selection() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_metric_selection", false]], "check_metric_selection() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_metric_selection", false]], "check_mixed_precision_training() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_mixed_precision_training", false]], "check_mixed_precision_training() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_mixed_precision_training", false]], "check_model_caching() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_model_caching", false]], "check_model_caching() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_model_caching", false]], "check_model_persistence() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_model_persistence", false]], "check_model_persistence() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_model_persistence", false]], "check_model_versioning() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_model_versioning", false]], "check_model_versioning() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_model_versioning", false]], "check_overfit_prone_practices() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_overfit_prone_practices", false]], "check_overfit_prone_practices() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_overfit_prone_practices", false]], "check_reproducibility() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_reproducibility", false]], "check_reproducibility() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_reproducibility", false]], "check_tokenizer_caching() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.check_tokenizer_caching", false]], "check_tokenizer_caching() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.check_tokenizer_caching", false]], "check_unused_features() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.check_unused_features", false]], "check_unused_features() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.check_unused_features", false]], "detect_array_creation() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_array_creation", false]], "detect_array_creation() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_array_creation", false]], "detect_axis_specification() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_axis_specification", false]], "detect_axis_specification() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_axis_specification", false]], "detect_broadcasting_issues() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_broadcasting_issues", false]], "detect_broadcasting_issues() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_broadcasting_issues", false]], "detect_chain_indexing() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_chain_indexing", false]], "detect_chain_indexing() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_chain_indexing", false]], "detect_column_selection() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_column_selection", false]], "detect_column_selection() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_column_selection", false]], "detect_copy_view_issues() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_copy_view_issues", false]], "detect_copy_view_issues() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_copy_view_issues", false]], "detect_cross_validation() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_cross_validation", false]], "detect_cross_validation() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_cross_validation", false]], "detect_data_leakage() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_data_leakage", false]], "detect_data_leakage() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_data_leakage", false]], "detect_dataframe_modification() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_dataframe_modification", false]], "detect_dataframe_modification() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_dataframe_modification", false]], "detect_dtype_consistency() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_dtype_consistency", false]], "detect_dtype_consistency() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_dtype_consistency", false]], "detect_dtype_specification() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_dtype_specification", false]], "detect_dtype_specification() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_dtype_specification", false]], "detect_exception_handling() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_exception_handling", false]], "detect_exception_handling() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_exception_handling", false]], "detect_inefficient_operations() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_inefficient_operations", false]], "detect_inefficient_operations() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_inefficient_operations", false]], "detect_inplace_operations() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_inplace_operations", false]], "detect_inplace_operations() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_inplace_operations", false]], "detect_iterrows_usage() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_iterrows_usage", false]], "detect_iterrows_usage() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_iterrows_usage", false]], "detect_merge_parameters() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_merge_parameters", false]], "detect_merge_parameters() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_merge_parameters", false]], "detect_nan_equality() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_nan_equality", false]], "detect_nan_equality() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_nan_equality", false]], "detect_numpy_smells() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_numpy_smells", false]], "detect_numpy_smells() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_numpy_smells", false]], "detect_pandas_smells() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pandas_smells", false]], "detect_pandas_smells() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pandas_smells", false]], "detect_pipeline_usage() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pipeline_usage", false]], "detect_pipeline_usage() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pipeline_usage", false]], "detect_pytorch_augmentation() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_augmentation", false]], "detect_pytorch_augmentation() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_augmentation", false]], "detect_pytorch_batch_norm() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_batch_norm", false]], "detect_pytorch_batch_norm() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_batch_norm", false]], "detect_pytorch_dataloader_random() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_dataloader_random", false]], "detect_pytorch_dataloader_random() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_dataloader_random", false]], "detect_pytorch_deterministic() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_deterministic", false]], "detect_pytorch_deterministic() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_deterministic", false]], "detect_pytorch_dropout() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_dropout", false]], "detect_pytorch_dropout() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_dropout", false]], "detect_pytorch_eval_mode() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_eval_mode", false]], "detect_pytorch_eval_mode() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_eval_mode", false]], "detect_pytorch_forward() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_forward", false]], "detect_pytorch_forward() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_forward", false]], "detect_pytorch_grad_zero() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_grad_zero", false]], "detect_pytorch_grad_zero() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_grad_zero", false]], "detect_pytorch_logging() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_logging", false]], "detect_pytorch_logging() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_logging", false]], "detect_pytorch_lr_scheduler() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_lr_scheduler", false]], "detect_pytorch_lr_scheduler() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_lr_scheduler", false]], "detect_pytorch_mask() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_mask", false]], "detect_pytorch_mask() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_mask", false]], "detect_pytorch_random_seed() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_random_seed", false]], "detect_pytorch_random_seed() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_random_seed", false]], "detect_pytorch_smells() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_pytorch_smells", false]], "detect_pytorch_smells() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_pytorch_smells", false]], "detect_random_seed() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_random_seed", false]], "detect_random_seed() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_random_seed", false]], "detect_random_state() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_random_state", false]], "detect_random_state() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_random_state", false]], "detect_scaling_usage() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_scaling_usage", false]], "detect_scaling_usage() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_scaling_usage", false]], "detect_sklearn_smells() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_sklearn_smells", false]], "detect_sklearn_smells() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_sklearn_smells", false]], "detect_smells() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_smells", false]], "detect_smells() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.detect_smells", false]], "detect_smells() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.detect_smells", false]], "detect_smells() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_smells", false]], "detect_smells() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.detect_smells", false]], "detect_smells() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.detect_smells", false]], "detect_tensorflow_smells() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tensorflow_smells", false]], "detect_tensorflow_smells() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tensorflow_smells", false]], "detect_tf_augmentation() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_augmentation", false]], "detect_tf_augmentation() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_augmentation", false]], "detect_tf_batch_norm() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_batch_norm", false]], "detect_tf_batch_norm() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_batch_norm", false]], "detect_tf_checkpointing() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_checkpointing", false]], "detect_tf_checkpointing() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_checkpointing", false]], "detect_tf_dropout() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_dropout", false]], "detect_tf_dropout() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_dropout", false]], "detect_tf_early_stopping() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_early_stopping", false]], "detect_tf_early_stopping() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_early_stopping", false]], "detect_tf_logging() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_logging", false]], "detect_tf_logging() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_logging", false]], "detect_tf_lr_scheduler() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_lr_scheduler", false]], "detect_tf_lr_scheduler() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_lr_scheduler", false]], "detect_tf_mask() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_mask", false]], "detect_tf_mask() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_mask", false]], "detect_tf_memory_release() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_memory_release", false]], "detect_tf_memory_release() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_memory_release", false]], "detect_tf_metrics() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_metrics", false]], "detect_tf_metrics() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_metrics", false]], "detect_tf_model_evaluation() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_model_evaluation", false]], "detect_tf_model_evaluation() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_model_evaluation", false]], "detect_tf_random_seed() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_random_seed", false]], "detect_tf_random_seed() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_random_seed", false]], "detect_tf_tensor_array() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_tf_tensor_array", false]], "detect_tf_tensor_array() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_tf_tensor_array", false]], "detect_threshold_metrics() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_threshold_metrics", false]], "detect_threshold_metrics() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_threshold_metrics", false]], "detect_unit_tests() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_unit_tests", false]], "detect_unit_tests() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_unit_tests", false]], "detect_values_usage() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_values_usage", false]], "detect_values_usage() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_values_usage", false]], "detect_verbose_mode() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.detect_verbose_mode", false]], "detect_verbose_mode() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.detect_verbose_mode", false]], "frameworkspecificsmelldetector (class in ml_code_smell_detector)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector", false]], "frameworkspecificsmelldetector (class in ml_code_smell_detector.detectors.framework_detector)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector", false]], "generate_report() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.generate_report", false]], "generate_report() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.generate_report", false]], "generate_report() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.generate_report", false]], "generate_report() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.generate_report", false]], "generate_report() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.generate_report", false]], "generate_report() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.generate_report", false]], "get_frameworks_used() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.get_frameworks_used", false]], "get_frameworks_used() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.get_frameworks_used", false]], "get_results() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.get_results", false]], "get_results() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.get_results", false]], "get_results() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.get_results", false]], "get_results() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.get_results", false]], "get_results() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.get_results", false]], "get_results() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.get_results", false]], "get_smells() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.get_smells", false]], "get_smells() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.get_smells", false]], "huggingfacesmelldetector (class in ml_code_smell_detector)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector", false]], "huggingfacesmelldetector (class in ml_code_smell_detector.detectors.huggingface_detector)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector", false]], "is_framework_used() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.is_framework_used", false]], "is_framework_used() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.is_framework_used", false]], "is_package_used() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.is_package_used", false]], "is_package_used() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.is_package_used", false]], "ml_code_smell_detector": [[0, "module-ml_code_smell_detector", false]], "ml_code_smell_detector.detectors.framework_detector": [[1, "module-ml_code_smell_detector.detectors.framework_detector", false]], "ml_code_smell_detector.detectors.huggingface_detector": [[2, "module-ml_code_smell_detector.detectors.huggingface_detector", false]], "ml_code_smell_detector.detectors.ml_detector": [[4, "module-ml_code_smell_detector.detectors.ml_detector", false]], "ml_smelldetector (class in ml_code_smell_detector)": [[0, "ml_code_smell_detector.ML_SmellDetector", false]], "ml_smelldetector (class in ml_code_smell_detector.detectors.ml_detector)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector", false]], "module": [[0, "module-ml_code_smell_detector", false], [1, "module-ml_code_smell_detector.detectors.framework_detector", false], [2, "module-ml_code_smell_detector.detectors.huggingface_detector", false], [4, "module-ml_code_smell_detector.detectors.ml_detector", false]], "visit_module() (ml_code_smell_detector.detectors.framework_detector.frameworkspecificsmelldetector method)": [[1, "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector.visit_module", false]], "visit_module() (ml_code_smell_detector.detectors.huggingface_detector.huggingfacesmelldetector method)": [[2, "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector.visit_module", false]], "visit_module() (ml_code_smell_detector.detectors.ml_detector.ml_smelldetector method)": [[4, "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector.visit_module", false]], "visit_module() (ml_code_smell_detector.frameworkspecificsmelldetector method)": [[0, "ml_code_smell_detector.FrameworkSpecificSmellDetector.visit_module", false]], "visit_module() (ml_code_smell_detector.huggingfacesmelldetector method)": [[0, "ml_code_smell_detector.HuggingFaceSmellDetector.visit_module", false]], "visit_module() (ml_code_smell_detector.ml_smelldetector method)": [[0, "ml_code_smell_detector.ML_SmellDetector.visit_module", false]]}, "objects": {"": [[0, 0, 0, "-", "ml_code_smell_detector"]], "ml_code_smell_detector": [[0, 1, 1, "", "FrameworkSpecificSmellDetector"], [0, 1, 1, "", "HuggingFaceSmellDetector"], [0, 1, 1, "", "ML_SmellDetector"]], "ml_code_smell_detector.FrameworkSpecificSmellDetector": [[0, 2, 1, "", "add_smell"], [0, 2, 1, "", "check_imports"], [0, 2, 1, "", "detect_array_creation"], [0, 2, 1, "", "detect_axis_specification"], [0, 2, 1, "", "detect_broadcasting_issues"], [0, 2, 1, "", "detect_chain_indexing"], [0, 2, 1, "", "detect_column_selection"], [0, 2, 1, "", "detect_copy_view_issues"], [0, 2, 1, "", "detect_cross_validation"], [0, 2, 1, "", "detect_data_leakage"], [0, 2, 1, "", "detect_dataframe_modification"], [0, 2, 1, "", "detect_dtype_consistency"], [0, 2, 1, "", "detect_dtype_specification"], [0, 2, 1, "", "detect_exception_handling"], [0, 2, 1, "", "detect_inefficient_operations"], [0, 2, 1, "", "detect_inplace_operations"], [0, 2, 1, "", "detect_iterrows_usage"], [0, 2, 1, "", "detect_merge_parameters"], [0, 2, 1, "", "detect_nan_equality"], [0, 2, 1, "", "detect_numpy_smells"], [0, 2, 1, "", "detect_pandas_smells"], [0, 2, 1, "", "detect_pipeline_usage"], [0, 2, 1, "", "detect_pytorch_augmentation"], [0, 2, 1, "", "detect_pytorch_batch_norm"], [0, 2, 1, "", "detect_pytorch_dataloader_random"], [0, 2, 1, "", "detect_pytorch_deterministic"], [0, 2, 1, "", "detect_pytorch_dropout"], [0, 2, 1, "", "detect_pytorch_eval_mode"], [0, 2, 1, "", "detect_pytorch_forward"], [0, 2, 1, "", "detect_pytorch_grad_zero"], [0, 2, 1, "", "detect_pytorch_logging"], [0, 2, 1, "", "detect_pytorch_lr_scheduler"], [0, 2, 1, "", "detect_pytorch_mask"], [0, 2, 1, "", "detect_pytorch_random_seed"], [0, 2, 1, "", "detect_pytorch_smells"], [0, 2, 1, "", "detect_random_seed"], [0, 2, 1, "", "detect_random_state"], [0, 2, 1, "", "detect_scaling_usage"], [0, 2, 1, "", "detect_sklearn_smells"], [0, 2, 1, "", "detect_smells"], [0, 2, 1, "", "detect_tensorflow_smells"], [0, 2, 1, "", "detect_tf_augmentation"], [0, 2, 1, "", "detect_tf_batch_norm"], [0, 2, 1, "", "detect_tf_checkpointing"], [0, 2, 1, "", "detect_tf_dropout"], [0, 2, 1, "", "detect_tf_early_stopping"], [0, 2, 1, "", "detect_tf_logging"], [0, 2, 1, "", "detect_tf_lr_scheduler"], [0, 2, 1, "", "detect_tf_mask"], [0, 2, 1, "", "detect_tf_memory_release"], [0, 2, 1, "", "detect_tf_metrics"], [0, 2, 1, "", "detect_tf_model_evaluation"], [0, 2, 1, "", "detect_tf_random_seed"], [0, 2, 1, "", "detect_tf_tensor_array"], [0, 2, 1, "", "detect_threshold_metrics"], [0, 2, 1, "", "detect_unit_tests"], [0, 2, 1, "", "detect_values_usage"], [0, 2, 1, "", "detect_verbose_mode"], [0, 2, 1, "", "generate_report"], [0, 2, 1, "", "get_frameworks_used"], [0, 2, 1, "", "get_results"], [0, 2, 1, "", "get_smells"], [0, 2, 1, "", "visit_module"]], "ml_code_smell_detector.HuggingFaceSmellDetector": [[0, 2, 1, "", "add_smell"], [0, 2, 1, "", "check_deterministic_tokenization"], [0, 2, 1, "", "check_distributed_training"], [0, 2, 1, "", "check_early_stopping"], [0, 2, 1, "", "check_efficient_data_loading"], [0, 2, 1, "", "check_gradient_accumulation"], [0, 2, 1, "", "check_learning_rate_scheduling"], [0, 2, 1, "", "check_mixed_precision_training"], [0, 2, 1, "", "check_model_caching"], [0, 2, 1, "", "check_model_versioning"], [0, 2, 1, "", "check_tokenizer_caching"], [0, 2, 1, "", "detect_smells"], [0, 2, 1, "", "generate_report"], [0, 2, 1, "", "get_results"], [0, 2, 1, "", "is_framework_used"], [0, 2, 1, "", "visit_module"]], "ml_code_smell_detector.ML_SmellDetector": [[0, 2, 1, "", "add_smell"], [0, 2, 1, "", "check_cross_validation"], [0, 2, 1, "", "check_data_leakage"], [0, 2, 1, "", "check_data_loading"], [0, 2, 1, "", "check_documentation"], [0, 2, 1, "", "check_error_handling"], [0, 2, 1, "", "check_feature_scaling"], [0, 2, 1, "", "check_feature_selection"], [0, 2, 1, "", "check_hardcoded_filepaths"], [0, 2, 1, "", "check_imbalanced_dataset"], [0, 2, 1, "", "check_imports"], [0, 2, 1, "", "check_magic_numbers"], [0, 2, 1, "", "check_metric_selection"], [0, 2, 1, "", "check_model_persistence"], [0, 2, 1, "", "check_overfit_prone_practices"], [0, 2, 1, "", "check_reproducibility"], [0, 2, 1, "", "check_unused_features"], [0, 2, 1, "", "detect_smells"], [0, 2, 1, "", "generate_report"], [0, 2, 1, "", "get_results"], [0, 2, 1, "", "is_package_used"], [0, 2, 1, "", "visit_module"]], "ml_code_smell_detector.detectors": [[1, 0, 0, "-", "framework_detector"], [2, 0, 0, "-", "huggingface_detector"], [4, 0, 0, "-", "ml_detector"]], "ml_code_smell_detector.detectors.framework_detector": [[1, 1, 1, "", "FrameworkSpecificSmellDetector"]], "ml_code_smell_detector.detectors.framework_detector.FrameworkSpecificSmellDetector": [[1, 2, 1, "", "add_smell"], [1, 2, 1, "", "check_imports"], [1, 2, 1, "", "detect_array_creation"], [1, 2, 1, "", "detect_axis_specification"], [1, 2, 1, "", "detect_broadcasting_issues"], [1, 2, 1, "", "detect_chain_indexing"], [1, 2, 1, "", "detect_column_selection"], [1, 2, 1, "", "detect_copy_view_issues"], [1, 2, 1, "", "detect_cross_validation"], [1, 2, 1, "", "detect_data_leakage"], [1, 2, 1, "", "detect_dataframe_modification"], [1, 2, 1, "", "detect_dtype_consistency"], [1, 2, 1, "", "detect_dtype_specification"], [1, 2, 1, "", "detect_exception_handling"], [1, 2, 1, "", "detect_inefficient_operations"], [1, 2, 1, "", "detect_inplace_operations"], [1, 2, 1, "", "detect_iterrows_usage"], [1, 2, 1, "", "detect_merge_parameters"], [1, 2, 1, "", "detect_nan_equality"], [1, 2, 1, "", "detect_numpy_smells"], [1, 2, 1, "", "detect_pandas_smells"], [1, 2, 1, "", "detect_pipeline_usage"], [1, 2, 1, "", "detect_pytorch_augmentation"], [1, 2, 1, "", "detect_pytorch_batch_norm"], [1, 2, 1, "", "detect_pytorch_dataloader_random"], [1, 2, 1, "", "detect_pytorch_deterministic"], [1, 2, 1, "", "detect_pytorch_dropout"], [1, 2, 1, "", "detect_pytorch_eval_mode"], [1, 2, 1, "", "detect_pytorch_forward"], [1, 2, 1, "", "detect_pytorch_grad_zero"], [1, 2, 1, "", "detect_pytorch_logging"], [1, 2, 1, "", "detect_pytorch_lr_scheduler"], [1, 2, 1, "", "detect_pytorch_mask"], [1, 2, 1, "", "detect_pytorch_random_seed"], [1, 2, 1, "", "detect_pytorch_smells"], [1, 2, 1, "", "detect_random_seed"], [1, 2, 1, "", "detect_random_state"], [1, 2, 1, "", "detect_scaling_usage"], [1, 2, 1, "", "detect_sklearn_smells"], [1, 2, 1, "", "detect_smells"], [1, 2, 1, "", "detect_tensorflow_smells"], [1, 2, 1, "", "detect_tf_augmentation"], [1, 2, 1, "", "detect_tf_batch_norm"], [1, 2, 1, "", "detect_tf_checkpointing"], [1, 2, 1, "", "detect_tf_dropout"], [1, 2, 1, "", "detect_tf_early_stopping"], [1, 2, 1, "", "detect_tf_logging"], [1, 2, 1, "", "detect_tf_lr_scheduler"], [1, 2, 1, "", "detect_tf_mask"], [1, 2, 1, "", "detect_tf_memory_release"], [1, 2, 1, "", "detect_tf_metrics"], [1, 2, 1, "", "detect_tf_model_evaluation"], [1, 2, 1, "", "detect_tf_random_seed"], [1, 2, 1, "", "detect_tf_tensor_array"], [1, 2, 1, "", "detect_threshold_metrics"], [1, 2, 1, "", "detect_unit_tests"], [1, 2, 1, "", "detect_values_usage"], [1, 2, 1, "", "detect_verbose_mode"], [1, 2, 1, "", "generate_report"], [1, 2, 1, "", "get_frameworks_used"], [1, 2, 1, "", "get_results"], [1, 2, 1, "", "get_smells"], [1, 2, 1, "", "visit_module"]], "ml_code_smell_detector.detectors.huggingface_detector": [[2, 1, 1, "", "HuggingFaceSmellDetector"]], "ml_code_smell_detector.detectors.huggingface_detector.HuggingFaceSmellDetector": [[2, 2, 1, "", "add_smell"], [2, 2, 1, "", "check_deterministic_tokenization"], [2, 2, 1, "", "check_distributed_training"], [2, 2, 1, "", "check_early_stopping"], [2, 2, 1, "", "check_efficient_data_loading"], [2, 2, 1, "", "check_gradient_accumulation"], [2, 2, 1, "", "check_learning_rate_scheduling"], [2, 2, 1, "", "check_mixed_precision_training"], [2, 2, 1, "", "check_model_caching"], [2, 2, 1, "", "check_model_versioning"], [2, 2, 1, "", "check_tokenizer_caching"], [2, 2, 1, "", "detect_smells"], [2, 2, 1, "", "generate_report"], [2, 2, 1, "", "get_results"], [2, 2, 1, "", "is_framework_used"], [2, 2, 1, "", "visit_module"]], "ml_code_smell_detector.detectors.ml_detector": [[4, 1, 1, "", "ML_SmellDetector"]], "ml_code_smell_detector.detectors.ml_detector.ML_SmellDetector": [[4, 2, 1, "", "add_smell"], [4, 2, 1, "", "check_cross_validation"], [4, 2, 1, "", "check_data_leakage"], [4, 2, 1, "", "check_data_loading"], [4, 2, 1, "", "check_documentation"], [4, 2, 1, "", "check_error_handling"], [4, 2, 1, "", "check_feature_scaling"], [4, 2, 1, "", "check_feature_selection"], [4, 2, 1, "", "check_hardcoded_filepaths"], [4, 2, 1, "", "check_imbalanced_dataset"], [4, 2, 1, "", "check_imports"], [4, 2, 1, "", "check_magic_numbers"], [4, 2, 1, "", "check_metric_selection"], [4, 2, 1, "", "check_model_persistence"], [4, 2, 1, "", "check_overfit_prone_practices"], [4, 2, 1, "", "check_reproducibility"], [4, 2, 1, "", "check_unused_features"], [4, 2, 1, "", "detect_smells"], [4, 2, 1, "", "generate_report"], [4, 2, 1, "", "get_results"], [4, 2, 1, "", "is_package_used"], [4, 2, 1, "", "visit_module"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method"}, "terms": {"": 5, "A": [0, 1, 2, 4], "For": [6, 7], "It": [0, 1, 6], "Not": [0, 1], "The": [0, 1, 3, 4, 5, 7], "These": 7, "To": 8, "about": 0, "accident": 5, "accumul": [0, 2, 5], "accuraci": [0, 4], "across": [0, 2, 4, 5], "add": [0, 1, 2, 4], "add_smel": [0, 1, 2, 4], "after": 5, "against": [0, 4], "algorithm": 5, "all": [0, 1, 2, 4, 6, 8], "alongsid": 5, "also": 8, "analysi": [0, 1, 4], "analyz": [0, 1, 2, 4, 6, 8], "ani": [0, 2, 4], "anti": [0, 1, 4], "api": 6, "appli": 5, "appropri": [0, 4, 5], "ar": [0, 1, 2, 4, 5], "area": 8, "arrai": [0, 1, 5], "assess": 8, "associ": [0, 4], "ast": [0, 1, 2, 4], "astroid": 7, "augment": [0, 1, 5], "automat": [5, 7, 8], "avoid": [0, 4, 5], "axi": [0, 1], "backward": 5, "bad": 6, "base": [0, 1, 2, 4], "basic": [0, 4], "batch": [0, 1, 2, 4, 5], "befor": [0, 4, 5], "behavior": 5, "being": [0, 1, 2, 4], "benefici": [0, 2], "benefit": [0, 1, 2], "best": [0, 1, 2, 6, 8], "bia": [0, 4], "block": [0, 4], "bool": [0, 2, 4], "breakdown": 5, "broadcast": [0, 1], "cach": [0, 2, 5], "call": [0, 1, 5], "can": [5, 7, 8], "case": [0, 2, 6], "catch": 8, "categori": 5, "cd": [7, 8], "chain": [0, 1, 5], "check": [0, 2, 4, 5, 8], "check_cross_valid": [0, 4], "check_data_leakag": [0, 4], "check_data_load": [0, 4], "check_deterministic_token": [0, 2], "check_distributed_train": [0, 2], "check_document": [0, 4], "check_early_stop": [0, 2], "check_efficient_data_load": [0, 2], "check_error_handl": [0, 4], "check_feature_sc": [0, 4], "check_feature_select": [0, 4], "check_gradient_accumul": [0, 2], "check_hardcoded_filepath": [0, 4], "check_imbalanced_dataset": [0, 4], "check_import": [0, 1, 4], "check_learning_rate_schedul": [0, 2], "check_magic_numb": [0, 4], "check_metric_select": [0, 4], "check_mixed_precision_train": [0, 2], "check_model_cach": [0, 2], "check_model_persist": [0, 4], "check_model_vers": [0, 2], "check_overfit_prone_practic": [0, 4], "check_reproduc": [0, 4], "check_tokenizer_cach": [0, 2], "check_unused_featur": [0, 4], "checker": 5, "checkpoint": [0, 1, 5], "choic": [0, 4], "ci": 8, "clariti": 5, "class": [0, 1, 2, 4], "classif": [0, 4], "clear": 5, "clone": 7, "code": [0, 3, 5, 7, 8], "code_snippet": [0, 1], "codebas": [0, 4, 8], "collect": [0, 4], "column": [0, 1, 5], "com": 7, "command": 6, "comment": 5, "common": [0, 1, 2, 4, 6, 8], "commonli": [0, 4], "comparison": [0, 1, 5], "compat": 5, "configur": [0, 2, 4, 5], "confus": [0, 1], "consist": 5, "constant": 5, "contain": [0, 1, 2, 4], "continu": 8, "control": 5, "convent": 5, "convers": 5, "copi": [0, 1], "could": [0, 2, 4], "count": [0, 1, 2], "creation": [0, 1], "critic": [0, 4], "cross": [0, 1, 4, 5], "cross_val_scor": [0, 4], "data": [0, 1, 2, 4, 5], "datafram": [0, 1, 5], "dataload": [0, 1, 2, 5], "dataset": [0, 2, 4, 5], "datatyp": 5, "deal": [0, 4], "defin": [0, 2, 4], "depend": [0, 1, 5, 6], "descript": [0, 2, 4], "detail": [0, 1, 2, 4, 5, 6], "detect": [0, 1, 2, 4, 5, 6], "detect_array_cr": [0, 1], "detect_axis_specif": [0, 1], "detect_broadcasting_issu": [0, 1], "detect_chain_index": [0, 1], "detect_column_select": [0, 1], "detect_copy_view_issu": [0, 1], "detect_cross_valid": [0, 1], "detect_data_leakag": [0, 1], "detect_dataframe_modif": [0, 1], "detect_dtype_consist": [0, 1], "detect_dtype_specif": [0, 1], "detect_exception_handl": [0, 1], "detect_inefficient_oper": [0, 1], "detect_inplace_oper": [0, 1], "detect_iterrows_usag": [0, 1], "detect_merge_paramet": [0, 1], "detect_nan_equ": [0, 1], "detect_numpy_smel": [0, 1], "detect_pandas_smel": [0, 1], "detect_pipeline_usag": [0, 1], "detect_pytorch_augment": [0, 1], "detect_pytorch_batch_norm": [0, 1], "detect_pytorch_dataloader_random": [0, 1], "detect_pytorch_determinist": [0, 1], "detect_pytorch_dropout": [0, 1], "detect_pytorch_eval_mod": [0, 1], "detect_pytorch_forward": [0, 1], "detect_pytorch_grad_zero": [0, 1], "detect_pytorch_log": [0, 1], "detect_pytorch_lr_schedul": [0, 1], "detect_pytorch_mask": [0, 1], "detect_pytorch_random_se": [0, 1], "detect_pytorch_smel": [0, 1], "detect_random_se": [0, 1], "detect_random_st": [0, 1], "detect_scaling_usag": [0, 1], "detect_sklearn_smel": [0, 1], "detect_smel": [0, 1, 2, 4, 8], "detect_tensorflow_smel": [0, 1], "detect_tf_augment": [0, 1], "detect_tf_batch_norm": [0, 1], "detect_tf_checkpoint": [0, 1], "detect_tf_dropout": [0, 1], "detect_tf_early_stop": [0, 1], "detect_tf_log": [0, 1], "detect_tf_lr_schedul": [0, 1], "detect_tf_mask": [0, 1], "detect_tf_memory_releas": [0, 1], "detect_tf_metr": [0, 1], "detect_tf_model_evalu": [0, 1], "detect_tf_random_se": [0, 1], "detect_tf_tensor_arrai": [0, 1], "detect_threshold_metr": [0, 1], "detect_unit_test": [0, 1], "detect_values_usag": [0, 1], "detect_verbose_mod": [0, 1], "detector": [5, 7, 8], "determinist": [0, 1, 5], "develop": [0, 4, 7, 8], "dict": [0, 1, 2, 4], "dictionari": [0, 1, 2, 4], "differ": [0, 4, 5], "direct": [0, 1, 5], "directori": 8, "discourag": 5, "distribut": [0, 2, 5], "docstr": [0, 4, 5], "document": [0, 4, 5], "download": [0, 2, 5], "dropout": [0, 1, 5], "dtype": [0, 1], "dure": [5, 8], "dynam": [0, 2, 5], "e": [0, 1, 5, 7], "each": [0, 1, 5], "earli": [0, 1, 2, 5, 8], "edit": 7, "educ": 8, "effect": [0, 2], "effici": [0, 2, 5], "enabl": [0, 2], "encourag": 5, "engin": [0, 4], "ensur": [0, 4, 5], "environ": [0, 4], "equal": [0, 1, 5], "error": [0, 4, 5], "especi": [0, 4, 5], "estim": 5, "etc": [0, 4], "evalu": [0, 1, 4, 5], "except": [0, 1, 4, 5], "exclud": [0, 4], "exist": 8, "explicit": 5, "explicitli": [0, 2], "f": 8, "face": [0, 3, 6], "fals": [0, 2, 4], "featur": [0, 4], "file": [0, 1, 2, 4, 5, 6, 8], "file_path": [0, 1, 2, 4, 8], "filepath": 5, "fix": [0, 1, 2], "follow": 7, "format": [0, 1, 2, 4], "forward": [0, 1, 5], "found": [0, 1, 4], "framework": [0, 2, 3, 4, 6], "framework_detector": [1, 8], "framework_smel": 8, "frameworks_us": [0, 1], "frameworkspecificsmelldetector": [0, 1, 3, 6, 8], "from": [0, 4, 8], "function": [0, 2, 4], "futur": 5, "g": [0, 1, 5], "gener": [0, 1, 2, 3, 6, 8], "generate_report": [0, 1, 2, 4, 8], "get": [0, 1, 2, 4], "get_frameworks_us": [0, 1], "get_result": [0, 1, 2, 4], "get_smel": [0, 1], "git": 7, "github": 7, "gradient": [0, 1, 2, 5], "handl": [0, 1, 2, 4, 5], "hard": 5, "hardcod": [0, 4, 5], "have": [0, 4], "help": 6, "here": 5, "how": [0, 1, 2], "how_to_fix": [0, 1], "http": 7, "hug": [0, 3, 6], "huggingface_detector": [2, 8], "huggingface_smel": 8, "huggingfacesmelldetector": [0, 2, 3, 6, 8], "human": [0, 4], "i": [0, 2, 4, 5, 6], "identifi": [0, 1, 2, 4, 5, 6, 8], "imbalanc": [0, 4, 5], "implement": [0, 1, 2, 4, 5], "import": [0, 1, 2, 4, 5, 8], "improp": [0, 4, 5], "improv": [0, 1, 8], "includ": [0, 1, 3, 4, 6], "inconsist": [0, 1, 2, 4], "independ": [0, 1, 5], "index": [0, 1, 5, 6], "ineffici": [0, 1], "infer": 5, "inform": [0, 4], "initi": 8, "inplac": [0, 1, 5], "instal": 6, "instead": [0, 1, 2, 5], "instruct": [0, 1, 6], "integr": [0, 2, 8], "interfac": 6, "is_framework_us": [0, 2], "is_package_us": [0, 4], "isnan": 5, "issu": [0, 1, 2, 4, 5, 6, 8], "iter": [0, 1, 5], "iterrow": 5, "join": 8, "junior": 8, "kfold": [0, 4], "larg": [0, 4, 5], "larger": [0, 2], "later": [0, 4], "layer": 5, "lead": [0, 2, 4, 5], "leak": [0, 1], "leakag": [0, 1, 4, 5], "learn": [0, 1, 2, 4, 6, 7], "librari": [0, 2, 4, 6, 8], "like": [0, 1, 2, 4, 5], "line": [0, 1, 6], "line_numb": [0, 1], "list": [0, 1, 2, 4, 5, 6], "load": [0, 2, 4, 5], "locat": [0, 1, 4], "log": [0, 1, 5], "long": 5, "look": [0, 4], "loop": [0, 1, 5], "loss": 5, "machin": [0, 1, 4, 6], "magic": [0, 4, 5], "main": 3, "mask": [0, 1, 5], "math": 5, "mechan": [0, 2, 5], "memori": [0, 1, 2, 5], "merg": [0, 1, 5], "method": [0, 2, 4], "metric": [0, 1, 4, 5], "might": [0, 4, 5], "minmaxscal": [0, 4], "miss": [0, 1, 4, 5], "mix": [0, 2, 5], "ml": [0, 1, 3, 7, 8], "ml_code_smell_detector": [0, 1, 2, 4, 7, 8], "ml_detector": [4, 8], "ml_smell": 8, "ml_smell_detector": [6, 8], "ml_smelldetector": [0, 3, 4, 6, 8], "mode": [0, 1, 5, 7], "model": [0, 1, 2, 4, 5], "modif": [0, 1, 5], "modul": [0, 1, 2, 4, 5, 6], "more": [0, 4, 6], "move": [0, 4], "multipl": [0, 4], "name": [0, 1, 2, 4, 5], "nan": [0, 1, 5], "necessari": 5, "net": 5, "new": 8, "node": [0, 1, 2, 4], "nodeng": [0, 1, 2, 4], "non": [0, 1], "normal": [0, 1, 5], "normalis": 5, "np": 5, "number": [0, 1, 4, 5], "numer": [0, 1], "numpi": [0, 1, 4, 6, 7], "object": [0, 1, 2, 4], "often": 5, "onboard": 8, "ones": 5, "onli": [0, 1, 4], "oper": [0, 1, 4, 5], "optim": [0, 2], "other": [0, 2, 5], "otherwis": [0, 2, 4], "overfit": [0, 2, 4, 5], "packag": [0, 4, 6, 7], "page": [0, 6], "panda": [0, 1, 6, 7], "paramet": [0, 1, 2, 4, 5], "pass": 5, "path": [0, 1, 2, 4, 5, 6, 8], "pattern": [0, 1, 4], "perform": [0, 2, 4, 5], "persist": 5, "pip": [6, 7], "pipelin": [0, 1, 5, 8], "pleas": 6, "popular": [0, 1], "potenti": [0, 1, 2, 4, 5, 6, 8], "practic": [0, 1, 2, 4, 5, 6, 8], "pre": [0, 2], "precis": [0, 2, 5], "prefix": [0, 4], "preprocess": [0, 2, 4], "presenc": 5, "present": [0, 2, 4], "prevent": 5, "print": 8, "problem": [0, 4], "problemat": [0, 1], "process": [0, 2, 4, 5], "project": [0, 4, 8], "prone": 5, "proper": [0, 4, 5], "properli": [0, 4], "provid": [0, 1], "purpos": 7, "py": [6, 8], "python": [0, 1, 2, 4, 6], "pytorch": [0, 1, 6], "qualiti": 8, "quickli": 8, "random": [0, 1, 4, 5], "rate": [0, 1, 2, 5], "re": [0, 2, 5, 8], "readabl": [0, 4], "refactor": 8, "refer": 6, "regress": [0, 4], "regular": 5, "relat": [0, 1, 2, 4, 6], "releas": 5, "relev": [0, 4], "report": [0, 1, 2, 4, 8], "repositori": 7, "repres": [0, 1, 2, 4], "reproduc": [0, 2, 4, 5], "requir": 7, "result": [0, 1, 2, 4], "return": [0, 1, 2, 4], "review": 8, "risk": [0, 1], "run": [0, 2, 4, 5], "save": [0, 4, 5], "scale": [0, 1, 4, 5], "scaler": 5, "schedul": [0, 1, 2, 5], "scikit": [0, 1, 6, 7], "search": 6, "see": 6, "seed": [0, 1, 4, 5], "select": [0, 1, 4, 5], "sensit": 5, "separ": [0, 4], "set": [0, 2, 4, 5], "should": [0, 4, 5], "similar": 5, "simplifi": [0, 1, 2], "singl": 8, "size": [0, 2, 4, 5], "slower": [0, 2, 5], "smell": [0, 3, 7, 8], "smell_nam": [0, 1], "smote": [0, 4], "sourc": [0, 3], "special": [0, 4], "specif": [0, 2, 3, 4, 6], "specifi": [0, 2], "split": [0, 4, 5], "standard": [0, 2, 5], "standardscal": [0, 4], "state": [0, 1, 5], "step": [0, 4, 5], "stop": [0, 1, 2, 5], "str": [0, 1, 2, 4], "strategi": [0, 2, 4], "stratif": [0, 4], "string": [0, 1, 2, 4], "structur": [0, 4], "student": 8, "suboptim": [0, 1, 2], "suggest": [0, 1, 5], "suitabl": [0, 2], "tag": [0, 2], "task": [0, 4], "teach": 8, "techniqu": [0, 2, 4, 5], "tensor": 5, "tensorarrai": [0, 1, 5], "tensorboard": 5, "tensorboardx": 5, "tensorflow": [0, 1, 6, 7], "test": [0, 1, 4, 5], "text": [0, 1], "tf": 5, "than": 5, "thi": [0, 1, 2, 4], "those": [0, 4], "three": 3, "threshold": [0, 1, 5], "time": [0, 2], "to_numpi": 5, "token": [0, 2, 5], "tool": [0, 2, 5, 8], "torch": 7, "torchvis": 5, "total": [0, 1], "track": [0, 4], "train": [0, 2, 4, 5], "transform": [0, 2, 5, 6, 7], "true": [0, 2, 4, 5], "try": [0, 4], "type": [0, 1, 2, 4, 5], "unexpect": 5, "unit": [0, 1, 5], "unnecessari": [0, 1, 2, 5], "unus": [0, 4, 5], "us": [0, 1, 2, 4, 5, 6, 7], "usag": [0, 1, 2, 5, 6], "valid": [0, 1, 4, 5], "valu": [0, 1, 4, 5], "variabl": [0, 4, 5], "variou": 5, "vector": [0, 1, 5], "verbos": [0, 1, 5], "version": [0, 2, 4, 5], "view": [0, 1], "violat": [0, 2], "visit": [0, 1, 2], "visit_modul": [0, 1, 2, 4], "wa": [0, 1, 2, 4], "warn": [0, 4], "weight": [0, 4], "when": [0, 1, 2, 4, 5, 7], "where": [0, 1, 2, 4], "which": [0, 1, 2, 4, 5], "without": [0, 2], "write": 8, "you": [7, 8], "your": [6, 8], "yourusernam": 7, "zero": [0, 1]}, "titles": ["API Reference", "Framework-Specific Smell Detector", "Hugging Face Smell Detector", "Detectors", "General ML Smell Detector", "Features", "Welcome to ML Code Smell Detector\u2019s documentation!", "Installation", "Usage"], "titleterms": {"": 6, "api": [0, 8], "case": 8, "code": [1, 2, 4, 6], "command": 8, "content": 6, "depend": 7, "detector": [0, 1, 2, 3, 4, 6], "document": 6, "face": [2, 5], "featur": [5, 6], "framework": [1, 5], "gener": [4, 5], "hug": [2, 5], "indic": 6, "instal": 7, "interfac": 8, "learn": 5, "line": 8, "ml": [4, 5, 6], "numpi": 5, "panda": 5, "python": 8, "pytorch": 5, "quick": 6, "refer": 0, "scikit": 5, "smell": [1, 2, 4, 5, 6], "sourc": [1, 2, 4], "specif": [1, 5], "start": 6, "tabl": 6, "tensorflow": 5, "us": 8, "usag": 8, "welcom": 6}})